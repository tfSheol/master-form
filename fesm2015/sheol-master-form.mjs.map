{"version":3,"file":"sheol-master-form.mjs","sources":["../../../projects/master-form/src/lib/master-form.service.ts","../../../projects/master-form/src/lib/master-form.component.ts","../../../projects/master-form/src/lib/master-form.component.html","../../../projects/master-form/src/lib/master-form.module.ts","../../../projects/master-form/src/public-api.ts","../../../projects/master-form/src/sheol-master-form.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MasterFormService {\n  private ITEMS_RENDERED_AT_ONCE = 100;\n  private INTERVAL_IN_MS = 20;\n\n  constructor() { }\n\n  public setItemsRenderedAtOnce(value: number) {\n    this.ITEMS_RENDERED_AT_ONCE = value;\n  }\n\n  public getItemsRenderedAtOnce(): number {\n    return this.ITEMS_RENDERED_AT_ONCE;\n  }\n\n  public setInterValInMs(value: number) {\n    this.INTERVAL_IN_MS = value;\n  }\n\n  public getInterValInMs(): number {\n    return this.INTERVAL_IN_MS;\n  }\n\n  /*\n    this.masterFormService.buildData(500, (i) => {\n      let t = { ...result };\n      t.name = i + '-' + t.name;\n      t.display = i + '-' + t.display;\n      this.masterForms.push(t);\n    }, () => {\n      this.jsonData.next(this.masterForms);\n    });\n  */\n  public buildData(length: number, func: Function, func_render: Function) {\n    let currentIndex = 0;\n    const interval = setInterval(() => {\n      const nextIndex = currentIndex + this.ITEMS_RENDERED_AT_ONCE;\n      for (let n = currentIndex; n <= nextIndex; n++) {\n        if (n >= length) {\n          clearInterval(interval);\n          break;\n        }\n        func(n);\n      }\n      func_render();\n      currentIndex += this.ITEMS_RENDERED_AT_ONCE;\n    }, this.INTERVAL_IN_MS);\n  }\n}\n","import { AfterContentInit, Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { FormControl, FormGroup, ValidatorFn, FormGroupDirective } from '@angular/forms';\nimport { Observable, Subscription, of } from 'rxjs';\nimport { MasterFormHelperData } from './master-form.helper.interface';\n\nexport enum MasterFormType {\n    INPUT,\n    SELECT,\n    CHECKBOX,\n    TEXTAREA,\n    LABEL\n}\n\nexport declare interface MasterFormCustomField {\n    sourceField: string,\n    idField: string\n}\n\nexport declare interface MasterForm {\n    name: string;\n    display: string;\n    placeholder?: string;\n    controls?: ValidatorFn | ValidatorFn[];\n    required?: boolean;\n    type?: MasterFormType;\n    inputType?: 'color' | 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'time' | 'url' | 'week';\n    isMultiselect?: boolean;\n    hasIcon?: boolean;\n    icon?: string;\n    hasFilter?: boolean;\n    filterCtrl?: FormControl;\n    filterPlaceholder?: string;\n    filterNoEntries?: string;\n    errorMessageFunction?: (formControl: FormControl) => string;\n    onInput?: (formControl: FormControl, target: any) => void;\n    minLength?: number;\n    maxLength?: number;\n    data?: () => Observable<any>;\n    customDataField?: MasterFormCustomField;\n    value?: any[];\n    filteredValue?: any[];\n}\n\nexport enum SubType {\n    SYSTEM,\n    DEFAULT\n}\n\nexport declare interface Subs {\n    type: SubType;\n    subscription: Subscription\n}\n\n@Component({\n    moduleId: module.id,\n    selector: 'master-form',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: 'master-form.component.html',\n    styleUrls: ['master-form.component.scss']\n})\nexport class MasterFormComponent implements OnDestroy, OnInit, AfterContentInit {\n    public static MAX_INPUT_VALUE: number = 500;\n    public static MIN_INPUT_VALUE: number = 0;\n    private subscriptions: Subs[] = [];\n    public formGroup: FormGroup = new FormGroup({});\n\n    @Input() observable?: Observable<MasterForm[]>;\n    @Input('forms') masterForms?: MasterForm[] = [];\n    @Input() data: any = <any>{};\n    @Input() autoValidate?: boolean;\n\n    @Input() rendererItemsRenderedAtOnce?: number = 30;\n    @Input() rendererItemsIntervalInMs?: number = 20;\n\n    @Input() clear?: EventEmitter<void> = new EventEmitter();\n    @Input() render?: EventEmitter<void> = new EventEmitter();\n    @Input() reload?: EventEmitter<void> = new EventEmitter();\n\n    @Output() onInit?: EventEmitter<MasterFormHelperData<any>> = new EventEmitter();\n    @Output() onData?: EventEmitter<MasterFormHelperData<any>> = new EventEmitter();\n    @Output() onValidate?: EventEmitter<boolean> = new EventEmitter();\n    @Output() onError?: EventEmitter<any[]> = new EventEmitter();\n    @Output() onObservableUpdate?: EventEmitter<MasterFormHelperData<any>> = new EventEmitter();\n\n    @ViewChild('itemsContainer', { read: ViewContainerRef }) container: ViewContainerRef;\n    @ViewChild('item', { read: TemplateRef }) template: TemplateRef<any>;\n    @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n    constructor(private ref: ChangeDetectorRef) {\n    }\n\n    ngAfterContentInit() {\n        this.addSubscription(SubType.SYSTEM, this.clear.subscribe(() => {\n            this.masterForms = [];\n            this.data = {};\n            this.container.clear();\n            this.formGroup.reset();\n            this.formDirective.resetForm();\n            this.onError.emit([]);\n            this.onValidate.emit(false);\n            this.onData.emit({\n                data: [],\n                form: <FormGroup>{}\n            });\n            this.subscriptions.filter(sub => sub.type == SubType.DEFAULT).forEach(subscription => {\n                if (!subscription.subscription.closed) {\n                    subscription.subscription.unsubscribe();\n                }\n            });\n        }));\n        this.addSubscription(SubType.SYSTEM, this.render.subscribe(() => this.renderItem()));\n        this.addSubscription(SubType.SYSTEM, this.reload.subscribe(() => {\n            this.container.clear();\n            this.renderItem();\n        }));\n    }\n\n    private addInput<T>(masterForm: MasterForm): MasterFormComponent {\n        this.formGroup.addControl(masterForm.name, new FormControl('', masterForm.controls));\n        return this;\n    }\n\n    public isLabel(masterForm: MasterForm): boolean {\n        return masterForm.type === MasterFormType.LABEL;\n    }\n\n    public isInput(masterForm: MasterForm): boolean {\n        return masterForm.type === MasterFormType.INPUT;\n    }\n\n    public isSelect(masterForm: MasterForm): boolean {\n        return masterForm.type === MasterFormType.SELECT;\n    }\n\n    public isCheckbox(masterForm: MasterForm): boolean {\n        return masterForm.type === MasterFormType.CHECKBOX;\n    }\n\n    public isTextarea(masterForm: MasterForm): boolean {\n        return masterForm.type === MasterFormType.TEXTAREA;\n    }\n\n    private selectPlaceholder(masterForm: MasterForm): string {\n        return !masterForm.placeholder ? masterForm.display : masterForm.placeholder;\n    }\n\n    private autoAddInput(masterForms: MasterForm[]) {\n        masterForms.forEach((masterForm: MasterForm) => {\n            if (!masterForm.type) {\n                masterForm.type = MasterFormType.INPUT\n            }\n            if (!masterForm.onInput) {\n                masterForm.onInput = (formControl: FormControl, target: any) => { };\n            }\n            if (!masterForm.maxLength) {\n                masterForm.maxLength = MasterFormComponent.MAX_INPUT_VALUE;\n            }\n            if (!masterForm.minLength) {\n                masterForm.minLength = MasterFormComponent.MIN_INPUT_VALUE;\n            }\n            if (masterForm.data) {\n                this.addSubscription(SubType.DEFAULT, masterForm.data().subscribe(data => {\n                    masterForm.value = data;\n                    masterForm.filteredValue = data;\n                }));\n                if (masterForm.hasFilter) {\n                    let filterCtrl = new FormControl();\n                    this.addSubscription(SubType.DEFAULT, filterCtrl.valueChanges.subscribe(search => {\n                        this.filter(masterForm, search);\n                    }));\n                    this.formGroup.addControl(masterForm.name + '_filter', filterCtrl);\n                }\n                let formControl = new FormControl('', masterForm.controls);\n                this.formGroup.addControl(masterForm.name, formControl);\n            } else if (masterForm.type === MasterFormType.CHECKBOX) {\n                this.formGroup.addControl(masterForm.name, new FormControl(false));\n            } else {\n                this.formGroup.addControl(masterForm.name, new FormControl('', masterForm.controls));\n            }\n        });\n    }\n\n    private renderItem() {\n        const ITEMS_RENDERED_AT_ONCE = this.rendererItemsRenderedAtOnce\n        const INTERVAL_IN_MS = this.rendererItemsIntervalInMs;\n\n        let currentIndex = 0;\n\n        const end = this.masterForms.length;\n        console.log(\"start rendering...\");\n\n        const interval = setInterval(() => {\n            const nextIndex = currentIndex + ITEMS_RENDERED_AT_ONCE;\n            for (let n = currentIndex; n <= nextIndex; n++) {\n                if (n >= end) {\n                    clearInterval(interval);\n                    break;\n                }\n                this.container.createEmbeddedView(this.template, {\n                    masterForm: this.masterForms[n]\n                });\n            }\n            this.ref.detectChanges();\n            currentIndex += ITEMS_RENDERED_AT_ONCE;\n        }, INTERVAL_IN_MS);\n    };\n\n    protected addSubscription(type: SubType, subscription: Subscription) {\n        this.subscriptions.push({\n            type: type,\n            subscription: subscription\n        });\n    }\n\n    private init(masterForms: MasterForm[]) {\n        this.autoAddInput(masterForms);\n        this.addSubscription(SubType.DEFAULT, this.formGroup.valueChanges.subscribe(value => {\n            Object.getOwnPropertyNames(value).forEach(val => {\n                if (val.includes('_filter')) {\n                    delete value[val];\n                }\n            });\n            masterForms.forEach(el => {\n                if (el.customDataField) {\n                    let data = [...value[el.name]];\n                    value[el.name] = [];\n                    data?.forEach(element => {\n                        let vl = el.value?.find(e => e[el.customDataField.sourceField] === element);\n                        if (vl) {\n                            value[el.name].push(vl[el.customDataField.idField]);\n                        }\n                    });\n                }\n            })\n            this.onData.emit(<MasterFormHelperData<any>>{\n                data: value,\n                form: this.formGroup\n            });\n            this.onValidate.emit(!(this.formGroup.valid));\n        }));\n        if (this.data != null) {\n            this.formGroup.patchValue(this.data);\n            this.onInit.emit(<MasterFormHelperData<any>>{\n                data: this.data,\n                form: this.formGroup\n            });\n        }\n        this.renderItem();\n        if (this.onError) {\n            if (this.formGroup.errors !== null) {\n                this.emitOnError();\n            }\n        }\n    }\n\n    emitOnError() {\n        this.onError.emit(Object.keys(this.formGroup.controls)\n            .filter(key => this.formGroup.controls[key].status === \"INVALID\")\n            .map(object => {\n                return {\n                    'name': object,\n                    'erros': this.formGroup.controls[object].errors,\n                    'status': this.formGroup.controls[object].status,\n                    'isValid': this.formGroup.controls[object].status !== \"INVALID\"\n                }\n            }));\n    }\n\n    ngOnDestroy() {\n        console.log('destroy')\n        this.subscriptions.forEach(subscription => {\n            if (!subscription.subscription.closed) {\n                subscription.subscription.unsubscribe();\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        if (this.observable) {\n            this.addSubscription(SubType.SYSTEM, this.observable.subscribe(masterForms => {\n                this.masterForms = masterForms;\n                this.init(masterForms);\n                if (this.onObservableUpdate) {\n                    this.onObservableUpdate.emit(<MasterFormHelperData<any>>{\n                        data: this.data,\n                        form: this.formGroup\n                    });\n                    this.emitOnError();\n                }\n            }));\n        } else if (this.masterForms) {\n            this.init(this.masterForms);\n        }\n    }\n\n    private filter(masterForm: MasterForm, search: string) {\n        if (!search) {\n            masterForm.filteredValue = masterForm.value;\n            return;\n        } else {\n            search = search.toLowerCase();\n        }\n        if (masterForm.customDataField) {\n            masterForm.filteredValue = masterForm.value.filter(item => item[masterForm.customDataField.sourceField].toLowerCase().indexOf(search) > -1);\n        } else {\n            masterForm.filteredValue = masterForm.value.filter(item => item.toLowerCase().indexOf(search) > -1);\n        }\n    }\n\n    public getItemsList(masterForm: MasterForm): any[] {\n        if (masterForm.hasFilter) {\n            return masterForm.filteredValue;\n        }\n        return masterForm.value;\n    }\n}\n","<div>\n    <ng-container #itemsContainer></ng-container>\n<div>\n<form [formGroup]=\"formGroup\" #formDirective=\"ngForm\">\n    <!-- <div *ngFor=\"let masterForm of masterForms\"> -->\n    <ng-template #item let-masterForm=\"masterForm\">\n        <mat-chip color=\"primary\" selected *ngIf=\"formGroup.controls[masterForm.name] && isLabel(masterForm)\">{{masterForm.display}}</mat-chip>\n        <mat-divider *ngIf=\"formGroup.controls[masterForm.name] && isLabel(masterForm)\"></mat-divider>\n        <mat-form-field *ngIf=\"formGroup.controls[masterForm.name] && isInput(masterForm)\" appearance=\"fill\"\n            class=\"register-input\">\n            <mat-label>{{masterForm.display}}</mat-label>\n            <input [formControlName]=\"masterForm.name\" [type]=\"masterForm.inputType\" matInput [placeholder]=\"masterForm.placeholder\" \n            (input)=\"masterForm.onInput(formGroup.controls[masterForm.name], $event.target)\" \n            [minLength]=\"masterForm.minLength\" [maxLength]=\"masterForm.maxLength\" [required]=\"masterForm.required\">\n            <mat-error *ngIf=\"masterForm.errorMessageFunction && formGroup.controls[masterForm.name].invalid\">\n                {{masterForm.errorMessageFunction(formGroup.controls[masterForm.name])}}\n            </mat-error>\n            <mat-icon *ngIf=\"masterForm.hasIcon\" matSuffix>{{masterForm.icon}}</mat-icon>\n        </mat-form-field>\n        <mat-form-field *ngIf=\"formGroup.controls[masterForm.name] && isSelect(masterForm)\">\n            <mat-select [formControlName]=\"masterForm.name\" [placeholder]=\"selectPlaceholder(masterForm)\"\n                [multiple]=masterForm.isMultiselect [required]=\"masterForm.required\">\n                <mat-option *ngIf=\"masterForm.hasFilter\">\n                    <ngx-mat-select-search [formControlName]=\"masterForm.name + '_filter'\"\n                        [placeholderLabel]=\"masterForm.filterPlaceholder\"\n                        [noEntriesFoundLabel]=\"masterForm.filterNoEntries\"></ngx-mat-select-search>\n                </mat-option>\n                <mat-option *ngIf=\"!masterForm.required\" value=\"null\">Aucun</mat-option> <!-- todo: change condition & value-->\n                <ng-container *ngFor=\"let value of getItemsList(masterForm)\">\n                    <mat-option *ngIf=\"!masterForm.customDataField\" [value]=\"value\">{{ value }}</mat-option>\n                    <mat-option *ngIf=\"masterForm.customDataField\" [value]=\"value[masterForm.customDataField.sourceField]\">{{ value[masterForm.customDataField.sourceField] }}</mat-option>\n                </ng-container>\n            </mat-select>\n            <mat-error *ngIf=\"masterForm.errorMessageFunction && formGroup.controls[masterForm.name].invalid\">\n                {{masterForm.errorMessageFunction(formGroup.controls[masterForm.name])}}\n            </mat-error>\n            <mat-icon *ngIf=\"masterForm.hasIcon\" matSuffix>{{masterForm.icon}}</mat-icon>\n        </mat-form-field>\n        <div *ngIf=\"formGroup.controls[masterForm.name] && isCheckbox(masterForm)\" class=\"add-bottom-padding\">\n            <mat-checkbox [formControlName]=\"masterForm.name\" [required]=required>{{masterForm.display}}</mat-checkbox>\n            <mat-icon *ngIf=\"masterForm.hasIcon\" matSuffix>{{masterForm.icon}}</mat-icon>\n        </div>\n        <mat-form-field *ngIf=\"formGroup.controls[masterForm.name] && isTextarea(masterForm)\" appearance=\"fill\"\n            class=\"register-input\">\n            <mat-label>{{masterForm.display}}</mat-label>\n            <textarea [formControlName]=\"masterForm.name\" matInput [placeholder]=\"masterForm.placeholder\" [required]=\"masterForm.required\"></textarea>\n            <mat-error *ngIf=\"masterForm.errorMessageFunction && formGroup.controls[masterForm.name].invalid\">\n                {{masterForm.errorMessageFunction(formGroup.controls[masterForm.name])}}\n            </mat-error>\n            <mat-icon *ngIf=\"masterForm.hasIcon\" matSuffix>{{masterForm.icon}}</mat-icon>\n        </mat-form-field>\n    </ng-template>\n    <!-- </div> -->\n</form>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { MasterFormComponent } from './master-form.component';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        CommonModule,\n        FormsModule,\n        MatButtonModule,\n        MatDividerModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        FlexLayoutModule,\n        MatSelectModule,\n        MatSnackBarModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        NgxMatSelectSearchModule\n    ],\n    declarations: [\n        MasterFormComponent\n    ],\n    exports: [\n        MasterFormComponent,\n    ]\n})\nexport class MasterFormModule {\n\n}\n","/*\n * Public API Surface of master-form\n */\n\nexport * from './lib/master-form.service';\nexport * from './lib/master-form.component';\nexport * from './lib/master-form.module';\nexport * from './lib/master-form.helper.interface';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}